import re
import sys
import json


TPL = '''
// generated by {}; DO NOT EDIT
package pansi

const (
\tInvalid AnsiEscapeType = iota
{}
)
'''

def format_code(code):
    rep = '{name} ({code})\n{short}\n\n{description}\n'.format(**code)
    rep += '\nFormat:\n'
    for form in code['format']:
        spacing = [len(x) - len(y) for x, y in zip(*form)]
        rep += '\t' + ' '.join([x + (' ' * -spaces if spaces < 0 else '') for x, spaces in zip(form[0], spacing)]) + '\n'
        rep += '\t' + ' '.join([x + (' ' * spaces if spaces > 0 else '') for x, spaces in zip(form[1], spacing)]) + '\n'

    if code['parameters']:
        rep += '\nParameters:\n'

        for key, value in code['parameters'].items():
            rep += '\t{}- {}'.format(key, value)

        if code['default']:
            rep += '\n\nDefault: {}'.format(code['default'])
    return rep

if __name__ == '__main__':
    with open('codes.json', 'r') as fobj:
        codes = json.load(fobj)
    buf = ''
    for code in codes:
        names = [
            re.sub('[ \-,\(\)/\':]', '', name)
            for name in
            filter(lambda x: x, [code['code'], code['name']])
        ]
        buf += '\t'
        buf += ', '.join(names)
        buf += ' AnsiEscapeType = '
        buf += ', '.join('iota' for x in names)
        buf += '\n'

        buf += '\n'.join('\t//' + line for line in format_code(code).split('\n'))
        buf += '\n\n'

    with open('codes.go', 'w') as fobj:
        fobj.write(TPL.format(' '.join(sys.argv), buf.strip()).strip())
